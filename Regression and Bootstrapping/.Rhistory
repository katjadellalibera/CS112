re(1,length(observation_vector))
rep(1,length(observation_vector))
df=data.frame(this=rep(1,length(observation_vector)),that=rep(0,length(observation_vector))
df=data.frame(this=rep(1,length(observation_vector)),that=rep(0,length(observation_vector))
logit <- coefs[1] + person[1]*coefs[2] +
person[2]*coefs[3] +
person[3]*coefs[4] +
person[4]*coefs[5] +
person[5]*coefs[6] +
person[6]*coefs[7] +
person[7]*coefs[8]
df=data.frame(this=rep(1,length(observation_vector)),that=rep(0,length(observation_vector)))
#making dataframe with entire dataset
data_frame_treatment<-data.frame(probability = observation_vector,treat = rep(1,length(observation_vector)))
#making dataframe with entire dataset
data_frame_treatment<-data.frame(probability = observation_vector, treat = rep(1,length(observation_vector)))
probability
set
data_frame_treatment<-data.frame(probability=observation_vector,group=rep(1,length(observation_vector)))
observation_vector
rep(1,length(observation_vector))
#making dataframe with entire dataset
data_frame_treatment <- data.frame(probability = observation_vecto[,1]r, treat = rep(1,length(observation_vector)))
#making dataframe with entire dataset
data_frame_treatment <- data.frame(probability = observation_vecto[,1], treat = rep(1,length(observation_vector)))
#making dataframe with entire dataset
data_frame_treatment <- data.frame(probability = observation_vector[,1], treat = rep(1,length(observation_vector)))
data_frame_control <- data.frame(probability=control_observation_vector,treat=rep(0,length(control_observation_vector)))
# getting probabilities for treatment group
for (observation in 1:297){
observation_vector[observation]<-as.numeric(treatment_probability(lm_nsw$coefficients,treatment_observations[observation,]))
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]<-as.numeric(treatment_probability(lm_nsw$coefficients,control_observations[observation,]))
}
#making dataframe with entire dataset
data_frame_treatment <- data.frame(probability = observation_vector, treat = rep(1,length(observation_vector)))
data_frame_control <- data.frame(probability=control_observation_vector,treat=rep(0,length(control_observation_vector)))
data_frame<- rbind(data_frame_treatment,data_frame_control)
observation_vector
for (observation in 1:297){
observation_vector[observation]<-treatment_probability(lm_nsw$coefficients,treatment_observations[observation,])[1]
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]<-treatment_probability(lm_nsw$coefficients,control_observations[observation,])[1]
}
#making dataframe with entire dataset
data_frame_treatment <- data.frame(probability = observation_vector, treat = rep(1,length(observation_vector)))
data_frame_control <- data.frame(probability=control_observation_vector,treat=rep(0,length(control_observation_vector)))
data_frame<- rbind(data_frame_treatment,data_frame_control)
library(foreign)
nsw <- read.dta("nsw.dta")
# predictor model
nsw_control<-nsw%>%
filter(treat==0)
nsw_treat<- nsw%>%
filter(treat==1)
treatment_observations<-data.frame(age=nsw_treat$age,education=nsw_treat$education,black=nsw_treat$black,
hispanic=nsw_treat$hispanic,married=nsw_treat$married,nodegree=nsw_treat$nodegree,
re75=nsw_treat$re75)
control_observations<-data.frame(age=nsw_control$age,education=nsw_control$education,black=nsw_control$black,
hispanic=nsw_control$hispanic,married=nsw_control$married,nodegree=nsw_control$nodegree,
re75=nsw_control$re75)
lm_nsw <- glm(treat~age+education+black+hispanic+married+nodegree+re75,data=nsw)
treatment_probability <- function(coefs,person){
logit <- coefs[1] + person[1]*coefs[2] +
person[2]*coefs[3] +
person[3]*coefs[4] +
person[4]*coefs[5] +
person[5]*coefs[6] +
person[6]*coefs[7] +
person[7]*coefs[8]
return(logit)
}
observation_vector <- rep(0,297)
control_observation_vector<- rep(0,425)
# getting probabilities for treatment group
for (observation in 1:297){
observation_vector[observation]<-treatment_probability(lm_nsw$coefficients,treatment_observations[observation,])[1]
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]<-treatment_probability(lm_nsw$coefficients,control_observations[observation,])[1]
}
#making dataframe with entire dataset
data_frame_treatment <- data.frame(probability = observation_vector, treat = rep(1,length(observation_vector)))
data_frame_control <- data.frame(probability=control_observation_vector,treat=rep(0,length(control_observation_vector)))
data_frame<- rbind(data_frame_treatment,data_frame_control)
observation_vector
#plotting the histogram
library(ggplot2)
ggplot(data_frame,aes(x=probability,group=as.factor(group),fill=as.factor(group)))+
scale_fill_manual(values=c("lightblue","red"))+
geom_histogram()+
labs(fill= "treatment group")
for (observation in 1:297){
observation_vector[observation]=treatment_probability(lm_nsw$coefficients,treatment_observations[observation,])[1]
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]=treatment_probability(lm_nsw$coefficients,control_observations[observation,])[1]
}
data_frame_treatment <- data.frame(probability = observation_vector, treat = rep(1,length(observation_vector)))
data_frame_control <- data.frame(probability=control_observation_vector,treat=rep(0,length(control_observation_vector)))
data_frame<- rbind(data_frame_treatment,data_frame_control)
observation_vector
for (observation in 1:297){
observation_vector[observation]=treatment_probability(lm_nsw$coefficients,treatment_observations[observation,])[,1]
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]=treatment_probability(lm_nsw$coefficients,control_observations[observation,])[,1]
}
observation_vector
observation_vector[,1]
# getting probabilities for treatment group
for (observation in 1:297){
observation_vector[observation]=treatment_probability(lm_nsw$coefficients,treatment_observations[observation,])
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]=treatment_probability(lm_nsw$coefficients,control_observations[observation,])
}
observation_vector <- c(rep(0,297))
control_observation_vector<- c(rep(0,425))
for (observation in 1:297){
observation_vector[observation]=treatment_probability(lm_nsw$coefficients,treatment_observations[observation,])
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]=treatment_probability(lm_nsw$coefficients,control_observations[observation,])
}
# getting probabilities for treatment group
for (observation in 1:297){
observation_vector[observation]<-treatment_probability(lm_nsw$coefficients,treatment_observations[observation,])
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]<-treatment_probability(lm_nsw$coefficients,control_observations[observation,])
}
View(observation_vector)
observation_vector <- c(rep(0,297))
observation_vector[1]
observation_vector[1]<-1
for (observation in 1:297){
observation_vector[observation]<-treatment_probability(lm_nsw$coefficients,treatment_observations[observation,])
}
observation_vector <- c(rep(0,297))
observation_vector[observation]<-as.numeric(treatment_probability(lm_nsw$coefficients,treatment_observations[observation,]))
for (observation in 1:297){
observation_vector[observation]<-as.numeric(treatment_probability(lm_nsw$coefficients,treatment_observations[observation,]))
}
for (observation in 1:425){
control_observation_vector[observation]<-as.numeric(treatment_probability(lm_nsw$coefficients,control_observations[observation,]))
}
observation_vector <- c(rep(0,297))
control_observation_vector<- c(rep(0,425))
# getting probabilities for treatment group
for (observation in 1:297){
observation_vector[observation]<-as.numeric(treatment_probability(lm_nsw$coefficients,treatment_observations[observation,]))
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]<-as.numeric(treatment_probability(lm_nsw$coefficients,control_observations[observation,]))
}
#making dataframe with entire dataset
data_frame_treatment <- data.frame(probability = observation_vector, treat = rep(1,length(observation_vector)))
data_frame_control <- data.frame(probability=control_observation_vector,treat=rep(0,length(control_observation_vector)))
data_frame<- rbind(data_frame_treatment,data_frame_control)
library(ggplot2)
ggplot(data_frame,aes(x=probability,group=as.factor(group),fill=as.factor(group)))+
scale_fill_manual(values=c("lightblue","red"))+
geom_histogram()+
labs(fill= "treatment group")
library(ggplot2)
ggplot(data_frame,aes(x=probability,group=as.factor(treat),fill=as.factor(treat)))+
scale_fill_manual(values=c("lightblue","red"))+
geom_histogram()+
labs(fill= "treatment group")
treatment_probability <- function(coefs,person){
logit <- coefs[1] + person[1]*coefs[2] +
person[2]*coefs[3] +
person[3]*coefs[4] +
person[4]*coefs[5] +
person[5]*coefs[6] +
person[6]*coefs[7] +
person[7]*coefs[8]
return(exp(logit) /(1+ exp(logit)))
}
library(foreign)
nsw <- read.dta("nsw.dta")
# predictor model
nsw_control<-nsw%>%
filter(treat==0)
nsw_treat<- nsw%>%
filter(treat==1)
treatment_observations<-data.frame(age=nsw_treat$age,education=nsw_treat$education,black=nsw_treat$black,
hispanic=nsw_treat$hispanic,married=nsw_treat$married,nodegree=nsw_treat$nodegree,
re75=nsw_treat$re75)
control_observations<-data.frame(age=nsw_control$age,education=nsw_control$education,black=nsw_control$black,
hispanic=nsw_control$hispanic,married=nsw_control$married,nodegree=nsw_control$nodegree,
re75=nsw_control$re75)
lm_nsw <- glm(treat~age+education+black+hispanic+married+nodegree+re75,data=nsw)
treatment_probability <- function(coefs,person){
logit <- coefs[1] + person[1]*coefs[2] +
person[2]*coefs[3] +
person[3]*coefs[4] +
person[4]*coefs[5] +
person[5]*coefs[6] +
person[6]*coefs[7] +
person[7]*coefs[8]
return(exp(logit) /(1+ exp(logit)))
}
observation_vector <- c(rep(0,297))
control_observation_vector<- c(rep(0,425))
# getting probabilities for treatment group
for (observation in 1:297){
observation_vector[observation]<-as.numeric(treatment_probability(lm_nsw$coefficients,treatment_observations[observation,]))
}
# getting probabilities for control group
for (observation in 1:425){
control_observation_vector[observation]<-as.numeric(treatment_probability(lm_nsw$coefficients,control_observations[observation,]))
}
#making dataframe with entire dataset
data_frame_treatment <- data.frame(probability = observation_vector, treat = rep(1,length(observation_vector)))
data_frame_control <- data.frame(probability=control_observation_vector,treat=rep(0,length(control_observation_vector)))
data_frame<- rbind(data_frame_treatment,data_frame_control)
#plotting the histogram
library(ggplot2)
ggplot(data_frame,aes(x=probability,group=as.factor(treat),fill=as.factor(treat)))+
scale_fill_manual(values=c("lightblue","red"))+
geom_histogram()+
labs(fill= "treatment group")
## 3 ##
library(datasets)
# disregard treatment 2 and add indicator
plant_growth_filtered<- PlantGrowth%>%
filter(group!="trt2")%>%
mutate(indicator=as.numeric(group=="trt1"))
# bootstrap the 95% confidence interval
# auxiliary funtion
View(plant_growth_filtered)
boot_fn <- function(data,index) return(coef(lm(weight~indicator,
data=plant_growth_filtered),subset=index))
n_b<-10000 # bootstrap repetitions
boot_plant_growth<- numeric(n_b)
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
boot_plant_growth<- boot_fn(plant_growth_filtered,i) #store coefficients
}
conf_intervals <- apply(boot_plant_growth$t,2,quantile,c(0.025,0.975))
conf_intervals <- apply(boot_plant_growth,quantile,c(0.025,0.975))
conf_intervals <- quantile(boot_plant_growth,probs = c(0.025,0.975))
conf_intervals <- quantile(boot_plant_growth,probs = seq(0.025,0.975))
boot_plant_growth<- numeric(n_b)
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
boot_plant_growth[b] = boot_fn(plant_growth_filtered,i) #store coefficients
}
conf_intervals <- quantile(boot_plant_growth,probs = seq(0.025,0.975))
n_b<-10000 # bootstrap repetitions
boot_plant_growth<- numeric(n_b)
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
boot_plant_growth[b] = boot_fn(plant_growth_filtered,i) #store coefficients
}
conf_intervals <- quantile(boot_plant_growth,probs = seq(0.025,0.975))
boot_fn(plant_growth_filtered,c(1,2,3,4))
sample(x=1:n,size=n,replace=TRUE)
n <- length(plant_growth_filtered)
n <- 20
## 3 ##
library(datasets)
# disregard treatment 2 and add indicator
plant_growth_filtered<- PlantGrowth%>%
filter(group!="trt2")%>%
mutate(indicator=as.numeric(group=="trt1"))
# bootstrap the 95% confidence interval
# auxiliary funtion
boot_fn <- function(data,index) return(coef(lm(weight~indicator,
data=plant_growth_filtered),subset=index))
n_b<-10000 # bootstrap repetitions
n <- 20
boot_plant_growth<- numeric(n_b)
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
boot_plant_growth[b] = boot_fn(plant_growth_filtered,i) #store coefficients
}
conf_intervals <- quantile(boot_plant_growth,probs = seq(0.025,0.975))
conf_intervals
warnings()
sample(x=1:n,size=n,replace=TRUE)
boot_fn(plant_growth_filtered,sample(x=1:n,size=n,replace=TRUE))
n_b<-10000 # bootstrap repetitions
n <- 20
boot_plant_growth<- data.frame(intercept=rep(0,n_b),indicator=rep(0,n_b))
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
boot_plant_growth[b] = boot_fn(plant_growth_filtered,i) #store coefficients
}
conf_intervals <- quantile(boot_plant_growth,probs = seq(0.025,0.975))
conf_intervals_intercept <- quantile(boot_plant_growth$intercept,probs = seq(0.025,0.975))
conf_intervals_indicator <- quantile(boot_plant_growth$indicator,probs = seq(0.025,0.975))
boot_fn <- function(data,index) return(coef(lm(weight~indicator,
data=plant_growth_filtered),subset=index))
n_b<-10000 # bootstrap repetitions
n <- 20
boot_plant_growth<- data.frame(intercept=c(ep(0,n_b)),indicator=c(rep(0,n_b)))
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
boot_plant_growth[b] = boot_fn(plant_growth_filtered,i) #store coefficients
}
conf_intervals_intercept <- quantile(boot_plant_growth$intercept,probs = seq(0.025,0.975))
conf_intervals_indicator <- quantile(boot_plant_growth$indicator,probs = seq(0.025,0.975))
data=plant_growth_filtered),subset=index))
n_b<-10000 # bootstrap repetitions
n <- 20
boot_plant_growth<- data.frame(intercept=c(rep(0,n_b)),indicator=c(rep(0,n_b)))
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
boot_plant_growth[b] = boot_fn(plant_growth_filtered,i) #store coefficients
}
conf_intervals_intercept <- quantile(boot_plant_growth$intercept,probs = seq(0.025,0.975))
conf_intervals_indicator <- quantile(boot_plant_growth$indicator,probs = seq(0.025,0.975))
boot_plant_growth<- data.frame(intercept=c(rep(0,n_b)),indicator=c(rep(0,n_b)))
boot_plant_growth<- data.frame(intercept=c(rep(0,n_b)),indicator=c(rep(0,n_b)))
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
boot_plant_growth[b,1] = boot_fn(plant_growth_filtered,i)[1]
boot_plant_growth[b,2] = boot_fn(plant_growth_filtered,i)[2] #store coefficients
}
conf_intervals_intercept <- quantile(boot_plant_growth$intercept,probs = seq(0.025,0.975))
conf_intervals_indicator <- quantile(boot_plant_growth$indicator,probs = seq(0.025,0.975))
View(boot_plant_growth)
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
print(i)
boot_plant_growth[b,1] = boot_fn(plant_growth_filtered,i)[1]
boot_plant_growth[b,2] = boot_fn(plant_growth_filtered,i)[2] #store coefficients
}
boot_fn(plant_growth_filtered,c(1,3,5,2,5,6,7,3,2))
boot_fn(plant_growth_filtered,c(1,1,1,1,1,1,1,1,1))
boot_fn <- function(data,index) return(coef(lm(weight~indicator,
data=plant_growth_filtered,subset=index)))
boot_fn(plant_growth_filtered,c(1,3,5,2,5,6,7,3,2))
boot_fn(plant_growth_filtered,c(1,1,1,1,1,1,1,1,1))
boot_fn(plant_growth_filtered,c(1,1,1,1,1,9,1,1,1,1))
boot_fn(plant_growth_filtered,c(1,1,1,1,1,15,1,1,1,1))
n_b<-10000 # bootstrap repetitions
n <- 20
boot_plant_growth<- data.frame(intercept=c(rep(0,n_b)),indicator=c(rep(0,n_b)))
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
print(i)
boot_plant_growth[b,1] = boot_fn(plant_growth_filtered,i)[1]
boot_plant_growth[b,2] = boot_fn(plant_growth_filtered,i)[2] #store coefficients
}
n_b<-10000 # bootstrap repetitions
n <- 20
boot_plant_growth<- data.frame(intercept=c(rep(0,n_b)),indicator=c(rep(0,n_b)))
for (b in 1:n_b){
i=sample(x=1:n,size=n,replace=TRUE)
boot_plant_growth[b,1] = boot_fn(plant_growth_filtered,i)[1]
boot_plant_growth[b,2] = boot_fn(plant_growth_filtered,i)[2] #store coefficients
}
conf_intervals_intercept <- quantile(boot_plant_growth$intercept,probs = seq(0.025,0.975))
conf_intervals_indicator <- quantile(boot_plant_growth$indicator,probs = seq(0.025,0.975))
conf_intervals_indicator
conf_intervals_intercept
conf_intervals_intercept <- quantile(boot_plant_growth$intercept,probs = seq(0.025,0.975))
conf_intervals_intercept <- quantile(boot_plant_growth$intercept,probs = seq(0.025,0.975))
conf_intervals_intercept
conf_intervals_intercept <- quantile(boot_plant_growth$intercept,probs = c(0.025,0.975))
conf_intervals_indicator <- quantile(boot_plant_growth$indicator,probs = c(0.025,0.975))
conf_intervals_indicator
conf_intervals_intercept
confint(lm(weight~indicator,data=plant_growth_filtered),level = 0.95)
ggplot(boot_plant_growth,aes(x=intercept,fill="lightblue"))+
geom_histogram()
geom_histogram(data=boot_plant_growth,aes(x=indicator,fill="red"))
#histogram of boostrap results
ggplot(boot_plant_growth,aes(x=intercept,fill="intercept"))+
geom_histogram()+
geom_histogram(data=boot_plant_growth,aes(x=indicator,fill="indicator"))
ggplot(boot_plant_growth,aes(x=intercept,fill="intercept"))+
geom_histogram()+
geom_histogram(data=boot_plant_growth,aes(x=indicator,fill="indicator"))+
labs(fill= "coefficient group")
#histogram of boostrap results
ggplot(boot_plant_growth,aes(x=intercept,fill="intercept"))+
geom_histogram()+
geom_histogram(data=boot_plant_growth,aes(x=indicator,fill="indicator"))+
labs(fill= "coefficient group",x="coefficient")
conf_intervals_intercept <- quantile(boot_plant_growth$intercept,probs = c(0.025,0.5,0.975))
conf_intervals_indicator <- quantile(boot_plant_growth$indicator,probs = c(0.025,0.5,0.975))
conf_intervals_indicator
conf_intervals_intercept
library(Matching)
library(arm)
data(lalonde)
library(dplyr)
library(haven)
# selecting the control group
control_group <- lalonde%>%
filter(treat==0)
# making linear model
lm_lalonde <- lm(re78~age+educ+re74+re75+I(educ*re74)+I(educ*re75)+
I(age*re74)+I(age*re75)+I(age*age)+I(re74*re75),data=control_group)
summary(lm_lalonde)
# simulating interval of expected values
set.seed(2)
edu_median<-median(control_group$educ)
re74_median <- median(control_group$re74)
re75_median <- median(control_group$re75)
sim_results <- sim(lm_lalonde,n.sims=10000)
edu_75percent <- quantile(control_group$educ,probs=0.75)
re74_75percent <- quantile(control_group$re74,probs=0.75)
re75_75percent <- quantile(control_group$re75,probs=0.75)
set.seed(123)
library(arm)
library(dplyr)
data(lalonde)
df<-lalonde
df<-df%>%filter(treat==0)               #Filtering the dataframe to only include the control group and relevant columns
keep<-c("age","educ","re74","re75","re78")
df<-df[keep]
lm <- lm(re78 ~ age+educ+re74+re75+educ*re74+educ*re75+age*re74+age*re75+re74*re75, data = df)
summary(lm)
get_re78_val<- function(coefs,col,sig) {                  #defining a function to find the value of re78 from the regression model
re78_estimate<-coefs[1] + coefs[2]*col[1] +
coefs[3]*col[2] + coefs[4]*col[3] +
coefs[5]*col[4] + coefs[6]*col[2]*col[3] +
coefs[7]*col[2]*col[4] + coefs[8]*col[1]*col[3] +
coefs[9]*col[1]*col[4] + coefs[10]*col[3]*col[4] +rnorm(1,0,sig)       #This is where the simulated sigmas were included
return(re78_estimate)
}
sim.lm<-sim(lm,10000)         #Simulate the function and storing the values of sigma
sig<-sim.lm@sigma
storage.matrix1<-matrix(NA,nrow=10000,ncol=39)        #Creating a matrix to store 10000 predicted ys for each age
for(age in c(17:55)) {
for(i in 1:10000) {
random.person<- c(age,median(df$educ),median(df$re74),median(df$re75))
storage.matrix1[i,age-16]<- get_re78_val(coefs=sim.lm@coef[i, ], col=random.person,sig=sig[i])
}
}
conf.int1 <- apply(storage.matrix1, 2, quantile, probs = c(0.025, 0.975))    #Calculating confidence intervals from simulation
plot(x = c(-20000:20000), y = c(-20000:20000), type = "n", xlim = c(17,55), xlab='Age',ylab="Predicted Earnings in 1978",main="Predicted Earnings vs. Age")
for (age in 17:55) {
segments(                                   #Generate plot
x0 = age,
y0 = conf.int1[1, age - 16],
x1 = age,
y1 = conf.int1[2, age - 16])
}
sim.lm<-sim(lm,10000)         #Simulate the function and storing the values of sigma
sig<-sim.lm@sigma
storage.matrix1<-matrix(NA,nrow=10000,ncol=39)        #Creating a matrix to store 10000 predicted ys for each age
for(age in c(17:55)) {
for(i in 1:10000) {
random.person<- c(age,median(df$educ),median(df$re74),median(df$re75))
storage.matrix1[i,age-16]<- get_re78_val(coefs=sim.lm@coef[i, ], col=random.person,sig=sig[i])
}
}
set.seed(123)
sim.lm<-sim(lm,10000)
storage.matrix2<-matrix(NA,nrow=10000,ncol=39)
for(age in c(17:55)) {
for(i in 1:10000) {
random.person<- c(age,quantile(df$educ,0.9),quantile(df$re74,0.9),quantile(df$re75,0.9))
storage.matrix2[i,age-16]<- get_re78_val(sim.lm@coef[i, ], random.person,sig=sig[i])
}
}
conf.int2 <- apply(storage.matrix2, 2, quantile, probs = c(0.025, 0.975))
plot(x = c(-20000:20000), y = c(-20000:20000), type = "n", xlim = c(17,55), xlab='Age',ylab="Predicted Earnings in 1978",main="Predicted Earnings vs. Age")
for (age in 17:55) {
segments(
x0 = age,
y0 = conf.int2[1, age - 16],
x1 = age,
y1 = conf.int2[2, age - 16])
}
# test on plantgrowth
lm_plant_growth<- lm(weight~indicator,data=plant_growth_filtered)
lm_plant_growth<- lm(weight~indicator,data=plant_growth_filtered)
plant_growth_filtered$expected_weight<- lm_plant_growth$coefficients[1]+lm_plant_growth$coefficients[2]*plant_growth_filtered$indicator
r_function(plant_growth_filtered$weight,plant_growth_filtered$expected_weight)
## 4 ##
# R^2 function using the fact that it's correlation squared
r_function <- function(Y,pred_y) cor(Y,pred_y)^2
r_function(plant_growth_filtered$weight,plant_growth_filtered$expected_weight)
wth_filtered)
plant_growth_filtered$expected_weight<- rep(lm_plant_growth$coefficients[1],20)+
rep(lm_plant_growth$coefficients[2],20)*plant_growth_filtered$indicator
plant_growth_filtered$expected_weight<- rep(lm_plant_growth$coefficients[1],20)+
rep(lm_plant_growth$coefficients[2],20)*plant_growth_filtered$indicator
View(plant_growth_filtered)
plant_growth_filtered$expected_weight<- rep(lm_plant_growth$coefficients[1],20)+
rep(lm_plant_growth$coefficients[2],20)*plant_growth_filtered$indicator
r_function <- function(Y,pred_y) {
rss<- sum((pred_y-Y)^2)
tss<- sum((Y-(mean(Y)))^2)
r2<- (1-(rss/tss))
return(r2)
}
r_function(plant_growth_filtered$weight,plant_growth_filtered$expected_weight)
## 4 ##
# R^2 function using the fact that it's correlation squared
r_function <- function(Y,pred_y) cor(Y,pred_y)^2
#actual r^2 from linear model
summary(lm_plant_growth)
